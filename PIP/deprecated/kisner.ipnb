{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, sys, subprocess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy              as     np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot  as     plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bitarray             import bitarray                 ##  pip install --user bitarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fiberassign.hardware import load_hardware"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fiberassign.tiles    import load_tiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fiberassign.targets  import (TARGET_TYPE_SCIENCE,\n",
    "                                  TARGET_TYPE_SKY, \n",
    "                                  TARGET_TYPE_STANDARD,\n",
    "                                  Targets,\n",
    "                                  TargetsAvailable,\n",
    "                                  TargetTree,\n",
    "                                  FibersAvailable,\n",
    "                                  load_target_file) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fiberassign.assign   import  Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "##  from mpi4py           import MPI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##  https://arxiv.org/pdf/1703.02070.pdf,  https://arxiv.org/abs/1809.07355;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "root          = os.environ['SCRATCH'] + '/desi/test/fiberassign_mock/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Read hardward properties;  See run_assign_init of https://github.com/desihub/fiberassign/blob/master/py/fiberassign/scripts/assign.py\n",
    "hw            = load_hardware()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "fibers        = np.array(hw.fiber_id)\n",
    "nfiber        = len(fibers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Read the nominal footprint\n",
    "tiles         = load_tiles(root + 'tiles.fits')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[543,\n",
       " 544,\n",
       " 1587,\n",
       " 6305,\n",
       " 6306,\n",
       " 7349,\n",
       " 12065,\n",
       " 12067,\n",
       " 13111,\n",
       " 17827,\n",
       " 17829,\n",
       " 18873,\n",
       " 23589,\n",
       " 24633,\n",
       " 24635]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tiles.id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Target files.  Get these from command line arguments, etc.\n",
    "target_files  = ['mtl.fits', 'sky.fits', 'standards-dark.fits']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Realizations to do -- read these from a file or some other source. \n",
    "nrealizations = np.int(1000)\n",
    "realizations  = np.arange(nrealizations, dtype=np.int32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# How many MPI processes do we have and what is our rank?\n",
    "##  mpi_procs = MPI.COMM_WORLD.size\n",
    "##  mpi_rank  = MPI.COMM_WORLD.rank"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load Target data.  There may be some contention from all MPI processes \n",
    "# reading at once, but this is only done once at the start of the job. \n",
    "tgs           = Targets()\n",
    " \n",
    "for tgfile in target_files:\n",
    "    load_target_file(tgs, root + tgfile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Create a hierarchical triangle mesh lookup of the targets positions.\n",
    "tree          = TargetTree(tgs) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#   What iterations should this MPI rank compute? \n",
    "##  rank_realizations = np.array_split(realizations, mpi_procs)[mpi_rank]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bitarrayn"
     ]
    }
   ],
   "source": [
    "# Initialize the bitarray per target for our local realizations.\n",
    "result_i      = bitarray(nrealizations)\n",
    "result_i.setall(False)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Every MPI rank works on its own realizations. We run this job with one MPI rank per node \n",
    "# and then use OpenMP and multiprocessing within a node. \n",
    "\n",
    "##  for realization in rank_realizations:\n",
    "for loop in [0]:\n",
    "  ##  Based on this realization index, set up numpy random seeds, etc. \n",
    "  ##  If we are dithering our tile RA/DEC, compute that here. \n",
    "     \n",
    "  ##  tiles = dither_tiles(nominal tiles, seed)\n",
    "     \n",
    "  # Compute the targets available to each fiber for each tile. \n",
    "  tgsavail  = TargetsAvailable(hw, tgs, tiles, tree)\n",
    "   \n",
    "  # Compute the fibers on all tiles available for each target. \n",
    "  favail    = FibersAvailable(tgsavail)\n",
    "\n",
    "  ##  Create assignment object.\n",
    "  asgn      = Assignment(tgs, tgsavail, favail)\n",
    "\n",
    "  ##  First-pass assignment of science targets. \n",
    "  asgn.assign_unused(TARGET_TYPE_SCIENCE)\n",
    "\n",
    "  ##  Redistribute science targets across available petals.\n",
    "  asgn.redistribute_science()\n",
    "\n",
    "  ##  Assign standards, 10 per petal. \n",
    "  asgn.assign_unused(TARGET_TYPE_STANDARD, 10)\n",
    "  asgn.assign_force(TARGET_TYPE_STANDARD, 10)\n",
    "\n",
    "  ##  Assign sky, up to 40 per petal. \n",
    "  asgn.assign_unused(TARGET_TYPE_SKY, 40)\n",
    "  asgn.assign_force(TARGET_TYPE_SKY, 40)\n",
    "    \n",
    "  ##  If there are any unassigned fibers, try to place them somewhere. \n",
    "  asgn.assign_unused(TARGET_TYPE_SCIENCE)\n",
    "  asgn.assign_unused(TARGET_TYPE_SKY)\n",
    "  \n",
    "  ##  Loop over assigned tiles and update our bit array for this realization. \n",
    "  ##  Gather bit arrays from all precsess to rank zero and write them out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "##  Tile 543.\n",
    "tdata = asgn.tile_fiber_target(543)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "##  We are dumping only assigned targets, line 206 of https://github.com/desihub/fiberassign/blob/master/py/fiberassign/assign.py#L214\n",
    "tgids = np.array(sorted([y for x, y in tdata.items()]), dtype=np.int64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([288230395017708239, 288230395017708271, 288230395017708376, ...,\n",
       "       288230395068037608, 288230395068037697, 288230395068037702])"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tgids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "ntarget = len(tgids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "tg_ra           = np.empty(ntarget, dtype=np.float64)\n",
    "tg_dec          = np.empty(ntarget, dtype=np.float64)\n",
    "tg_bits         = np.zeros(ntarget, dtype=np.int64)\n",
    "tg_type         = np.empty(ntarget, dtype=np.uint8)\n",
    " \n",
    "tg_priority     = np.empty(ntarget, dtype=np.int32)\n",
    "tg_subpriority  = np.empty(ntarget, dtype=np.float64)\n",
    "tg_obscond      = np.empty(ntarget, dtype=np.int32)\n",
    "        \n",
    "tg_obsrem       = np.empty(ntarget, dtype=np.int32)\n",
    "tg_indx         = dict()\n",
    "\n",
    "for indx, tg in enumerate(tgids):\n",
    "    tg_indx[tg]          = indx\n",
    "    props                = tgs.get(tg)\n",
    "            \n",
    "    tg_obsrem[indx]      = 0\n",
    "\n",
    "    ##  if props.obsremain > 0:\n",
    "    ##   tg_obsrem[indx] = props.obsremain\n",
    "\n",
    "    tg_ra[indx]          = props.ra\n",
    "    tg_dec[indx]         = props.dec\n",
    "    \n",
    "    ##  tg_bits[indx] = props.bits\n",
    "    \n",
    "    tg_type[indx]        = props.type\n",
    "    tg_priority[indx]    = props.priority\n",
    "    tg_subpriority[indx] = props.subpriority\n",
    "    tg_obscond[indx]     = props.obscond"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'DEC')"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2aaae7ba8320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(tg_ra, tg_dec, s=0.1)  ##  alpha=0.1\n",
    "plt.xlabel('RA')\n",
    "plt.ylabel('DEC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "DESI 18.12",
   "language": "python",
   "name": "desi-18.12"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
